{
     "algorithm": "Proposed algorithm: Select a solution with the lowest combined objective value from the archive, then perform a segment relocation by moving a consecutive segment of nodes to a new position within the tour.}\n\n```python\nimport numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Proposed algorithm: Select a solution with the lowest combined objective value from the archive, then perform a segment relocation by moving a consecutive segment of nodes to a new position within the tour.",
     "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Proposed algorithm: Select a solution with the lowest combined objective value from the archive, then perform a segment relocation by moving a consecutive segment of nodes to a new position within the tour.}\n    \n    selected_solution = min(archive, key=lambda x: sum(x[1]))[0]  # Select solution with lowest combined objective value\n    new_solution = selected_solution.copy()\n    \n    # Randomly select a starting node for the segment and the length of the segment\n    start_node = np.random.randint(0, len(new_solution))\n    segment_length = np.random.randint(2, len(new_solution) // 2)  # Segment length should be at least 2 and at most half of the tour length\n    \n    # Extract the segment of nodes to be relocated\n    segment = new_solution[start_node:start_node+segment_length]\n    \n    # Remove the segment from the tour\n    new_solution = np.concatenate([new_solution[:start_node], new_solution[start_node+segment_length:]])\n    \n    # Choose a random position to insert the segment back\n    insert_position = np.random.randint(0, len(new_solution))\n    \n    # Reinsert the segment at the chosen position\n    new_solution = np.concatenate([new_solution[:insert_position], segment, new_solution[insert_position:]])\n    \n    return new_solution",
     "objective": [
          -1341.27217,
          1.3831
     ],
     "other_inf": null
}