[
     {
          "algorithm": "Proposed algorithm: Select a solution with the highest combined objective value from the archive, then randomly swap the positions of two nodes in the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {Proposed algorithm: Select a solution with the highest combined objective value from the archive, then randomly swap the positions of two nodes in the tour.}\n    \n    selected_solution = max(archive, key=lambda x: sum(x[1]))[0]  # Select solution with highest combined objective value\n    new_solution = selected_solution.copy()\n    \n    # Randomly select two distinct nodes\n    node1, node2 = np.random.choice(len(new_solution), 2, replace=False)\n    \n    # Swap the positions of the two selected nodes\n    new_solution[node1], new_solution[node2] = new_solution[node2], new_solution[node1]\n    \n    return new_solution",
          "objective": [
               -268.995,
               1.14042
          ],
          "other_inf": null
     }
]