[
     {
          "algorithm": "Proposed algorithm: Select a solution with the lowest combined objective value from the archive, then perform a segment relocation by moving a consecutive segment of nodes to a new position within the tour.}\n\n```python\nimport numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Proposed algorithm: Select a solution with the lowest combined objective value from the archive, then perform a segment relocation by moving a consecutive segment of nodes to a new position within the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Proposed algorithm: Select a solution with the lowest combined objective value from the archive, then perform a segment relocation by moving a consecutive segment of nodes to a new position within the tour.}\n    \n    selected_solution = min(archive, key=lambda x: sum(x[1]))[0]  # Select solution with lowest combined objective value\n    new_solution = selected_solution.copy()\n    \n    # Randomly select a starting node for the segment and the length of the segment\n    start_node = np.random.randint(0, len(new_solution))\n    segment_length = np.random.randint(2, len(new_solution) // 2)  # Segment length should be at least 2 and at most half of the tour length\n    \n    # Extract the segment of nodes to be relocated\n    segment = new_solution[start_node:start_node+segment_length]\n    \n    # Remove the segment from the tour\n    new_solution = np.concatenate([new_solution[:start_node], new_solution[start_node+segment_length:]])\n    \n    # Choose a random position to insert the segment back\n    insert_position = np.random.randint(0, len(new_solution))\n    \n    # Reinsert the segment at the chosen position\n    new_solution = np.concatenate([new_solution[:insert_position], segment, new_solution[insert_position:]])\n    \n    return new_solution",
          "objective": [
               -1341.27217,
               1.3831
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation operation where a segment of consecutive nodes is moved to a random new position in the tour.\n\nCode:\n}\n\n```python\nimport numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {New algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation operation where a segment of consecutive nodes is moved to a random new position in the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {New algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation operation where a segment of consecutive nodes is moved to a random new position in the tour.}\n    \n    selected_solution = max(archive, key=lambda x: sum(x[1]))[0]  # Select solution with highest combined objective value\n    new_solution = selected_solution.copy()\n    \n    # Choose a random segment of consecutive nodes\n    segment_start = np.random.randint(0, len(new_solution))\n    segment_length = np.random.randint(2, len(new_solution) - 1)  # Ensure segment has at least 2 nodes\n    segment_end = (segment_start + segment_length) % len(new_solution)\n    \n    # Choose a random position to relocate the segment\n    new_position = np.random.randint(0, len(new_solution))\n    \n    if segment_start < segment_end:\n        new_solution = np.concatenate((new_solution[:segment_start], new_solution[segment_end:], new_solution[segment_start:segment_end]))\n    else:\n        new_solution = np.concatenate((new_solution[:segment_end], new_solution[segment_start:], new_solution[segment_end:segment_start]))\n    \n    return new_solution",
          "objective": [
               -275.23656,
               1.12272
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nProposed algorithm: Select a solution with the highest total objective value from the archive, then perform a swap operation by exchanging two randomly chosen nodes in the tour.\n}\n\n```python\nimport numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {Proposed algorithm: Select a solution with the highest total objective value from the archive, then perform a swap operation by exchanging two randomly chosen nodes in the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {Proposed algorithm: Select a solution with the highest total objective value from the archive, then perform a swap operation by exchanging two randomly chosen nodes in the tour.}\n    \n    selected_solution = max(archive, key=lambda x: sum(x[1]))[0]  # Select solution with highest total objective value\n    new_solution = selected_solution.copy()\n    \n    # Randomly select two nodes to swap\n    node_idx_1, node_idx_2 = np.random.choice(len(new_solution), 2, replace=False)\n    \n    # Swap the selected nodes\n    new_solution[node_idx_1], new_solution[node_idx_2] = new_solution[node_idx_2], new_solution[node_idx_1]\n    \n    return new_solution",
          "objective": [
               -307.60943,
               1.3706
          ],
          "other_inf": null
     },
     {
          "algorithm": "Proposed algorithm: Select a solution with the lowest total objective value from the archive, then perform a reinsertion operation by moving a randomly chosen node to a different position in the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Proposed algorithm: Select a solution with the lowest total objective value from the archive, then perform a reinsertion operation by moving a randomly chosen node to a different position in the tour.}\n    \n    selected_solution = min(archive, key=lambda x: sum(x[1]))[0]  # Select solution with lowest total objective value\n    new_solution = selected_solution.copy()\n    \n    # Randomly select a node to reinsert\n    node_idx = np.random.choice(len(new_solution))\n    \n    # Randomly select a new position to reinsert the node\n    new_position = np.random.choice([i for i in range(len(new_solution)) if i != node_idx])\n    \n    # Reinsert the selected node at the new position\n    if new_position > node_idx:\n        new_solution = np.concatenate((new_solution[:node_idx], new_solution[node_idx + 1:new_position + 1], [new_solution[node_idx]], new_solution[new_position + 1:]))\n    else:\n        new_solution = np.concatenate((new_solution[:new_position], [new_solution[node_idx]], new_solution[new_position:node_idx], new_solution[node_idx + 1:]))\n    \n    return new_solution",
          "objective": [
               -1407.46641,
               1.5223
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nNew Algorithm Description: Select a solution with the lowest sum of objective values from the archive, then perform a reinsertion operation by removing a random node and inserting it at a random position in the tour.\n\n",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # New Algorithm: Select a solution with the lowest sum of objective values from the archive, then perform a reinsertion operation by removing a random node and inserting it at a random position in the tour.\n    \n    selected_solution = min(archive, key=lambda x: sum(x[1]))[0]  # Select solution with the lowest sum of objective values\n    new_solution = selected_solution.copy()\n    \n    # Remove a random node\n    removed_node = np.random.choice(len(new_solution))\n    removed_value = new_solution[removed_node]\n    new_solution = np.delete(new_solution, removed_node)\n    \n    # Insert the removed node at a random position\n    insert_position = np.random.randint(len(new_solution) + 1)\n    new_solution = np.insert(new_solution, insert_position, removed_value)\n    \n    return new_solution",
          "objective": [
               -1433.30129,
               1.52422
          ],
          "other_inf": null
     },
     {
          "algorithm": "Innovative algorithm: Select a solution with a balanced objective improvement potential from the archive, then perform a swap of two randomly chosen nodes in the tour considering both objective spaces simultaneously.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Innovative algorithm: Select a solution with a balanced objective improvement potential from the archive, then perform a swap of two randomly chosen nodes in the tour considering both objective spaces simultaneously.}\n    \n    selected_solution = max(archive, key=lambda x: sum(x[1]))[0]  # Select solution with balanced objective improvement potential\n    new_solution = selected_solution.copy()\n    \n    # Randomly choose two nodes to swap\n    node1, node2 = np.random.choice(len(new_solution), 2, replace=False)\n    \n    # Perform the swap operation in both objective spaces\n    new_solution[node1], new_solution[node2] = new_solution[node2], new_solution[node1]\n    \n    return new_solution",
          "objective": [
               -271.00906,
               1.13328
          ],
          "other_inf": null
     },
     {
          "algorithm": "Proposed algorithm: Select a solution with an objective value closest to the median of all objectives from the archive, then perform a reinsertion operation by moving a randomly chosen node to a new position within the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Proposed algorithm: Select a solution with an objective value closest to the median of all objectives from the archive, then perform a reinsertion operation by moving a randomly chosen node to a new position within the tour.}\n    \n    median_objective = np.median([np.mean(obj) for _, obj in archive])\n    selected_solution = min(archive, key=lambda x: abs(sum(x[1]) - median_objective))[0]  # Select solution with objective closest to the median\n    new_solution = selected_solution.copy()\n    \n    # Randomly select a node to reinsert\n    node_to_reinsert = np.random.choice(new_solution)\n    \n    # Remove the selected node from the tour\n    new_solution = np.delete(new_solution, np.where(new_solution == node_to_reinsert))\n    \n    # Choose a random position to insert the node back\n    insert_position = np.random.randint(0, len(new_solution))\n    \n    # Reinsert the node at the chosen position\n    new_solution = np.insert(new_solution, insert_position, node_to_reinsert)\n    \n    return new_solution",
          "objective": [
               -1426.83444,
               1.8738
          ],
          "other_inf": null
     },
     {
          "algorithm": "Proposed algorithm: Select a solution with the lowest total objective value from the archive, then perform a reinsertion operation by moving a randomly chosen node to a new position in the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Proposed algorithm: Select a solution with the lowest total objective value from the archive, then perform a reinsertion operation by moving a randomly chosen node to a new position in the tour.}\n\n    selected_solution = min(archive, key=lambda x: sum(x[1]))[0]  # Select solution with lowest total objective value\n    new_solution = selected_solution.copy()\n    \n    # Randomly select a node to reinsert\n    node_idx = np.random.choice(len(new_solution), 1)[0]\n    \n    # Choose a random position to reinsert the selected node\n    new_position = np.random.choice(len(new_solution), 1)[0]\n    \n    # Reinsert the selected node at the new position\n    if new_position > node_idx:\n        new_solution = np.concatenate((new_solution[:node_idx], new_solution[node_idx+1:new_position+1], np.array([new_solution[node_idx]]), new_solution[new_position+1:]))\n    else:\n        new_solution = np.concatenate((new_solution[:new_position], np.array([new_solution[node_idx]]), new_solution[new_position:node_idx], new_solution[node_idx+1:]))\n    \n    return new_solution",
          "objective": [
               -1409.45165,
               1.72605
          ],
          "other_inf": null
     }
]