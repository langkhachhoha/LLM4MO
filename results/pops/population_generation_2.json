[
     {
          "algorithm": "Proposed algorithm: Select a solution with the lowest combined objective value from the archive, then perform a segment relocation by moving a consecutive segment of nodes to a new position within the tour.}\n\n```python\nimport numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Proposed algorithm: Select a solution with the lowest combined objective value from the archive, then perform a segment relocation by moving a consecutive segment of nodes to a new position within the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # {Proposed algorithm: Select a solution with the lowest combined objective value from the archive, then perform a segment relocation by moving a consecutive segment of nodes to a new position within the tour.}\n    \n    selected_solution = min(archive, key=lambda x: sum(x[1]))[0]  # Select solution with lowest combined objective value\n    new_solution = selected_solution.copy()\n    \n    # Randomly select a starting node for the segment and the length of the segment\n    start_node = np.random.randint(0, len(new_solution))\n    segment_length = np.random.randint(2, len(new_solution) // 2)  # Segment length should be at least 2 and at most half of the tour length\n    \n    # Extract the segment of nodes to be relocated\n    segment = new_solution[start_node:start_node+segment_length]\n    \n    # Remove the segment from the tour\n    new_solution = np.concatenate([new_solution[:start_node], new_solution[start_node+segment_length:]])\n    \n    # Choose a random position to insert the segment back\n    insert_position = np.random.randint(0, len(new_solution))\n    \n    # Reinsert the segment at the chosen position\n    new_solution = np.concatenate([new_solution[:insert_position], segment, new_solution[insert_position:]])\n    \n    return new_solution",
          "objective": [
               -1341.27217,
               1.3831
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation operation where a segment of consecutive nodes is moved to a random new position in the tour.\n\nCode:\n}\n\n```python\nimport numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {New algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation operation where a segment of consecutive nodes is moved to a random new position in the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {New algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation operation where a segment of consecutive nodes is moved to a random new position in the tour.}\n    \n    selected_solution = max(archive, key=lambda x: sum(x[1]))[0]  # Select solution with highest combined objective value\n    new_solution = selected_solution.copy()\n    \n    # Choose a random segment of consecutive nodes\n    segment_start = np.random.randint(0, len(new_solution))\n    segment_length = np.random.randint(2, len(new_solution) - 1)  # Ensure segment has at least 2 nodes\n    segment_end = (segment_start + segment_length) % len(new_solution)\n    \n    # Choose a random position to relocate the segment\n    new_position = np.random.randint(0, len(new_solution))\n    \n    if segment_start < segment_end:\n        new_solution = np.concatenate((new_solution[:segment_start], new_solution[segment_end:], new_solution[segment_start:segment_end]))\n    else:\n        new_solution = np.concatenate((new_solution[:segment_end], new_solution[segment_start:], new_solution[segment_end:segment_start]))\n    \n    return new_solution",
          "objective": [
               -275.23656,
               1.12272
          ],
          "other_inf": null
     },
     {
          "algorithm": "Proposed algorithm: Select a solution with the highest combined objective value from the archive, then randomly swap the positions of two nodes in the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {Proposed algorithm: Select a solution with the highest combined objective value from the archive, then randomly swap the positions of two nodes in the tour.}\n    \n    selected_solution = max(archive, key=lambda x: sum(x[1]))[0]  # Select solution with highest combined objective value\n    new_solution = selected_solution.copy()\n    \n    # Randomly select two distinct nodes\n    node1, node2 = np.random.choice(len(new_solution), 2, replace=False)\n    \n    # Swap the positions of the two selected nodes\n    new_solution[node1], new_solution[node2] = new_solution[node2], new_solution[node1]\n    \n    return new_solution",
          "objective": [
               -268.995,
               1.14042
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nProposed algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation operation by moving a segment of consecutive nodes to a random position within the tour.\n}\n\n```python\nimport numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {Proposed algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation operation by moving a segment of consecutive nodes to a random position within the tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {Proposed algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation operation by moving a segment of consecutive nodes to a random position within the tour.}\n    \n    selected_solution = max(archive, key=lambda x: sum(x[1]))[0]  # Select solution with highest combined objective value\n    new_solution = selected_solution.copy()\n    \n    # Randomly select a segment length and starting position\n    segment_length = np.random.randint(2, len(new_solution))\n    start_idx = np.random.randint(0, len(new_solution) - segment_length + 1)\n    \n    # Extract the segment to be relocated\n    segment = new_solution[start_idx:start_idx + segment_length]\n    \n    # Randomly choose a new position to insert the segment\n    new_idx = np.random.randint(0, len(new_solution) - segment_length + 1)\n    \n    # Relocate the segment to the new position\n    new_solution = np.concatenate((new_solution[:new_idx], segment, new_solution[new_idx + segment_length:]))\n    \n    return new_solution",
          "objective": [
               -949.63178,
               1.40072
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nProposed algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation by moving a random segment of nodes within the tour to a different random position within the same tour.\n}\n\n```python\nimport numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {Proposed algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation by moving a random segment of nodes within the tour to a different random position within the same tour.",
          "code": "import numpy as np\n\ndef select_neighbor(archive, instance, distance_matrix_1, distance_matrix_2):\n    # Backbone idea: Local transformation of a solution to improve objectives.\n    \n    # {Proposed algorithm: Select a solution with the highest combined objective value from the archive, then perform a segment relocation by moving a random segment of nodes within the tour to a different random position within the same tour.}\n    \n    selected_solution = max(archive, key=lambda x: sum(x[1]))[0]  # Select solution with highest combined objective value\n    new_solution = selected_solution.copy()\n    \n    # Define segment size\n    segment_size = np.random.randint(2, len(new_solution) // 2 + 1)  # Segment size between 2 and N/2\n    \n    # Randomly select starting index for the segment\n    start_idx = np.random.randint(0, len(new_solution))\n    \n    # Perform segment relocation: move the segment to a different random position within the same tour\n    new_solution = np.roll(new_solution, np.random.randint(1, len(new_solution)), axis=0)\n    \n    return new_solution",
          "objective": [
               -271.1838,
               1.394
          ],
          "other_inf": null
     }
]